# 1로 만들기: 문제 설명
# 정수 x가 주어졌을 때, 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지입니다.
#     1. X가 5로 나누어 떨어지면, 5로 나눕니다.
#     2. X가 3으로 나누어 떨어지면, 3으로 나눕니다.
#     3. X가 2로  나누어 떨어지면, 2로 나눕니다.
#     4. X에서 1을 뻅니다.
# 정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 값을 1로 만들고자 합니다. 연산을 사용하는 횟수의 최솟값을 출력하세요.
# 예를 들어 정수가 26이면 다음과 같이 계산하여 3번의 연산이 최솟값입니다.
#     ex) 26 - 25 - 5 - 1
# 정수 X를 입력 받기
X = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
dp = [30001] * (X + 1)
dp[1] = 0 
# 다이나믹 프로그래밍 진행(보텀업)
for i in range(2, X + 1):
    # 현재의 수에서 1을 빼는 경우
    dp[i] = min(dp[i - 1] + 1, dp[i])
    # 현재의 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        dp[i] = min(dp[i//2] + 1, dp[i])
    # 현재의 수가 3로 나누어 떨어지는 경우
    if i % 3 == 0:
        dp[i] = min(dp[i//3] + 1, dp[i])
    # 현재의 수가 5로 나누어 떨어지는 경우
    if i % 5 == 0:
        dp[i] = min(dp[i//5] + 1, dp[i])

print(dp[X])

# 문제 해결 아이디어
# 피보나치 수열 문제를 도식화한 것처럼 함수가 호출되는 과정을 그림으로 그려보면 다음과 같습니다.
    # 최적 부분 구조와 중복되는 부분 문제를 만족합니다.
#f(6) - f(2), f(3), f(5)
#f(3) - f(2), f(1)

#Ai = i를 1로 만들기 위한 최소 연산 횟수
#Ai = min(Ai-1, Ai/2, Ai/3, Ai/5) + 1
# 단, 1을 빼는 연산을 제외하고는 해당수로 나누어 떨어질 떄에 한해 점화식을 적용할 수 있습니다.

