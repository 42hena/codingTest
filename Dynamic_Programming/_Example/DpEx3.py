# 효율적인 화폐 구성: 문제 설명
# N가지 종류의 화폐가 있습니다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 합니다.
# 이때 각 종류의 화폐는 몇 개라도 사용할 수 있습니다

# 예를 들어 2원, 3원 단위의 화폐가 있을 떄는 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한의 화폐 개수입니다.

# M원을 만들기 위한 최소한의 화폐 개수를 출력하는 프로그램을 작성하세요

# 정수 N, M을 입력 받기
N, M = map(int, input().split())
# N개의 화폐 단위 정보를 입력받기

array = []
for i in range(N):
    array.append(int(input()))

# 한 번 계산된 결과를 저장하기 위한 DP 테이블 초기화
dp = [10001] * (M + 1)

# 다이나믹 프로그래밍 진행(보텀업)
dp[0] = 0
for i in range(N):
    for j in range(array[i], M + 1):
        if dp[j - array[i]] != 10001: #(i-k)원을 만드는 방법이 존재하는 경우
            dp[j] = min(dp[j], dp[j - array[i]] + 1)

# 계산된 결과 출력
if dp[M] == 10001:
    print(-1)
else:
    print(dp[M])
        